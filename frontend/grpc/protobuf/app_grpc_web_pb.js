/**
 * @fileoverview gRPC-Web generated client stub for app
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.1
// 	protoc              v4.24.4
// source: protobuf/app.proto


/* eslint-disable */
// @ts-nocheck


goog.provide('proto.app.MetaClient');
goog.provide('proto.app.MetaPromiseClient');
goog.provide('proto.app.UserOperationClient');
goog.provide('proto.app.UserOperationPromiseClient');
goog.provide('proto.app.StorageClient');
goog.provide('proto.app.StoragePromiseClient');
goog.provide('proto.app.VideoClient');
goog.provide('proto.app.VideoPromiseClient');
goog.provide('proto.app.CommunityClient');
goog.provide('proto.app.CommunityPromiseClient');

goog.require('grpc.web.MethodDescriptor');
goog.require('grpc.web.MethodType');
goog.require('grpc.web.GrpcWebClientBase');
goog.require('grpc.web.AbstractClientBase');
goog.require('grpc.web.ClientReadableStream');
goog.require('grpc.web.RpcError');
goog.require('proto.app.AddUserFavouriteRequest');
goog.require('proto.app.AddUserLikeRequest');
goog.require('proto.app.AddVideoBulletRequest');
goog.require('proto.app.AddVideoCommentRequest');
goog.require('proto.app.AddVideoHistoryRequest');
goog.require('proto.app.EchoRequest');
goog.require('proto.app.EchoResponse');
goog.require('proto.app.EmptyResponse');
goog.require('proto.app.GetUploadTokenRequest');
goog.require('proto.app.GetUploadTokenResponse');
goog.require('proto.app.GetUserFavouriteRequest');
goog.require('proto.app.GetUserFavouriteResponse');
goog.require('proto.app.GetUserInfoByIdRequest');
goog.require('proto.app.GetUserInfoByUsernameRequest');
goog.require('proto.app.GetUserInfoResponse');
goog.require('proto.app.GetUserLikeRequest');
goog.require('proto.app.GetUserLikeResponse');
goog.require('proto.app.GetVideoBulletRequest');
goog.require('proto.app.GetVideoBulletResponse');
goog.require('proto.app.GetVideoCommentRequest');
goog.require('proto.app.GetVideoCommentResponse');
goog.require('proto.app.GetVideoFavouriteRequest');
goog.require('proto.app.GetVideoFavouriteResponse');
goog.require('proto.app.GetVideoFromTypeRequest');
goog.require('proto.app.GetVideoFromTypeResponse');
goog.require('proto.app.GetVideoLikeRequest');
goog.require('proto.app.GetVideoLikeResponse');
goog.require('proto.app.SignInRequest');
goog.require('proto.app.SignResponse');
goog.require('proto.app.SignUpRequest');

goog.requireType('grpc.web.ClientOptions');



goog.scope(function() {

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.app.MetaClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.app.MetaPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.app.EchoRequest,
 *   !proto.app.EchoResponse>}
 */
const methodDescriptor_Meta_Echo = new grpc.web.MethodDescriptor(
  '/app.Meta/Echo',
  grpc.web.MethodType.UNARY,
  proto.app.EchoRequest,
  proto.app.EchoResponse,
  /**
   * @param {!proto.app.EchoRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.app.EchoResponse.deserializeBinary
);


/**
 * @param {!proto.app.EchoRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.app.EchoResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.app.EchoResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.app.MetaClient.prototype.echo =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/app.Meta/Echo',
      request,
      metadata || {},
      methodDescriptor_Meta_Echo,
      callback);
};


/**
 * @param {!proto.app.EchoRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.app.EchoResponse>}
 *     Promise that resolves to the response
 */
proto.app.MetaPromiseClient.prototype.echo =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/app.Meta/Echo',
      request,
      metadata || {},
      methodDescriptor_Meta_Echo);
};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.app.UserOperationClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.app.UserOperationPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.app.SignUpRequest,
 *   !proto.app.SignResponse>}
 */
const methodDescriptor_UserOperation_SignUp = new grpc.web.MethodDescriptor(
  '/app.UserOperation/SignUp',
  grpc.web.MethodType.UNARY,
  proto.app.SignUpRequest,
  proto.app.SignResponse,
  /**
   * @param {!proto.app.SignUpRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.app.SignResponse.deserializeBinary
);


/**
 * @param {!proto.app.SignUpRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.app.SignResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.app.SignResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.app.UserOperationClient.prototype.signUp =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/app.UserOperation/SignUp',
      request,
      metadata || {},
      methodDescriptor_UserOperation_SignUp,
      callback);
};


/**
 * @param {!proto.app.SignUpRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.app.SignResponse>}
 *     Promise that resolves to the response
 */
proto.app.UserOperationPromiseClient.prototype.signUp =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/app.UserOperation/SignUp',
      request,
      metadata || {},
      methodDescriptor_UserOperation_SignUp);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.app.SignInRequest,
 *   !proto.app.SignResponse>}
 */
const methodDescriptor_UserOperation_SignIn = new grpc.web.MethodDescriptor(
  '/app.UserOperation/SignIn',
  grpc.web.MethodType.UNARY,
  proto.app.SignInRequest,
  proto.app.SignResponse,
  /**
   * @param {!proto.app.SignInRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.app.SignResponse.deserializeBinary
);


/**
 * @param {!proto.app.SignInRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.app.SignResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.app.SignResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.app.UserOperationClient.prototype.signIn =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/app.UserOperation/SignIn',
      request,
      metadata || {},
      methodDescriptor_UserOperation_SignIn,
      callback);
};


/**
 * @param {!proto.app.SignInRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.app.SignResponse>}
 *     Promise that resolves to the response
 */
proto.app.UserOperationPromiseClient.prototype.signIn =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/app.UserOperation/SignIn',
      request,
      metadata || {},
      methodDescriptor_UserOperation_SignIn);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.app.GetUserInfoByIdRequest,
 *   !proto.app.GetUserInfoResponse>}
 */
const methodDescriptor_UserOperation_GetUserInfoById = new grpc.web.MethodDescriptor(
  '/app.UserOperation/GetUserInfoById',
  grpc.web.MethodType.UNARY,
  proto.app.GetUserInfoByIdRequest,
  proto.app.GetUserInfoResponse,
  /**
   * @param {!proto.app.GetUserInfoByIdRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.app.GetUserInfoResponse.deserializeBinary
);


/**
 * @param {!proto.app.GetUserInfoByIdRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.app.GetUserInfoResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.app.GetUserInfoResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.app.UserOperationClient.prototype.getUserInfoById =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/app.UserOperation/GetUserInfoById',
      request,
      metadata || {},
      methodDescriptor_UserOperation_GetUserInfoById,
      callback);
};


/**
 * @param {!proto.app.GetUserInfoByIdRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.app.GetUserInfoResponse>}
 *     Promise that resolves to the response
 */
proto.app.UserOperationPromiseClient.prototype.getUserInfoById =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/app.UserOperation/GetUserInfoById',
      request,
      metadata || {},
      methodDescriptor_UserOperation_GetUserInfoById);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.app.GetUserInfoByUsernameRequest,
 *   !proto.app.GetUserInfoResponse>}
 */
const methodDescriptor_UserOperation_GetUserInfoByUsername = new grpc.web.MethodDescriptor(
  '/app.UserOperation/GetUserInfoByUsername',
  grpc.web.MethodType.UNARY,
  proto.app.GetUserInfoByUsernameRequest,
  proto.app.GetUserInfoResponse,
  /**
   * @param {!proto.app.GetUserInfoByUsernameRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.app.GetUserInfoResponse.deserializeBinary
);


/**
 * @param {!proto.app.GetUserInfoByUsernameRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.app.GetUserInfoResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.app.GetUserInfoResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.app.UserOperationClient.prototype.getUserInfoByUsername =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/app.UserOperation/GetUserInfoByUsername',
      request,
      metadata || {},
      methodDescriptor_UserOperation_GetUserInfoByUsername,
      callback);
};


/**
 * @param {!proto.app.GetUserInfoByUsernameRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.app.GetUserInfoResponse>}
 *     Promise that resolves to the response
 */
proto.app.UserOperationPromiseClient.prototype.getUserInfoByUsername =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/app.UserOperation/GetUserInfoByUsername',
      request,
      metadata || {},
      methodDescriptor_UserOperation_GetUserInfoByUsername);
};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.app.StorageClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.app.StoragePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.app.GetUploadTokenRequest,
 *   !proto.app.GetUploadTokenResponse>}
 */
const methodDescriptor_Storage_GetUploadToken = new grpc.web.MethodDescriptor(
  '/app.Storage/GetUploadToken',
  grpc.web.MethodType.UNARY,
  proto.app.GetUploadTokenRequest,
  proto.app.GetUploadTokenResponse,
  /**
   * @param {!proto.app.GetUploadTokenRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.app.GetUploadTokenResponse.deserializeBinary
);


/**
 * @param {!proto.app.GetUploadTokenRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.app.GetUploadTokenResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.app.GetUploadTokenResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.app.StorageClient.prototype.getUploadToken =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/app.Storage/GetUploadToken',
      request,
      metadata || {},
      methodDescriptor_Storage_GetUploadToken,
      callback);
};


/**
 * @param {!proto.app.GetUploadTokenRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.app.GetUploadTokenResponse>}
 *     Promise that resolves to the response
 */
proto.app.StoragePromiseClient.prototype.getUploadToken =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/app.Storage/GetUploadToken',
      request,
      metadata || {},
      methodDescriptor_Storage_GetUploadToken);
};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.app.VideoClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.app.VideoPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.app.GetVideoFromTypeRequest,
 *   !proto.app.GetVideoFromTypeResponse>}
 */
const methodDescriptor_Video_GetVideoFromType = new grpc.web.MethodDescriptor(
  '/app.Video/GetVideoFromType',
  grpc.web.MethodType.UNARY,
  proto.app.GetVideoFromTypeRequest,
  proto.app.GetVideoFromTypeResponse,
  /**
   * @param {!proto.app.GetVideoFromTypeRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.app.GetVideoFromTypeResponse.deserializeBinary
);


/**
 * @param {!proto.app.GetVideoFromTypeRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.app.GetVideoFromTypeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.app.GetVideoFromTypeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.app.VideoClient.prototype.getVideoFromType =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/app.Video/GetVideoFromType',
      request,
      metadata || {},
      methodDescriptor_Video_GetVideoFromType,
      callback);
};


/**
 * @param {!proto.app.GetVideoFromTypeRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.app.GetVideoFromTypeResponse>}
 *     Promise that resolves to the response
 */
proto.app.VideoPromiseClient.prototype.getVideoFromType =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/app.Video/GetVideoFromType',
      request,
      metadata || {},
      methodDescriptor_Video_GetVideoFromType);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.app.AddVideoHistoryRequest,
 *   !proto.app.EmptyResponse>}
 */
const methodDescriptor_Video_AddVideoHistory = new grpc.web.MethodDescriptor(
  '/app.Video/AddVideoHistory',
  grpc.web.MethodType.UNARY,
  proto.app.AddVideoHistoryRequest,
  proto.app.EmptyResponse,
  /**
   * @param {!proto.app.AddVideoHistoryRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.app.EmptyResponse.deserializeBinary
);


/**
 * @param {!proto.app.AddVideoHistoryRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.app.EmptyResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.app.EmptyResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.app.VideoClient.prototype.addVideoHistory =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/app.Video/AddVideoHistory',
      request,
      metadata || {},
      methodDescriptor_Video_AddVideoHistory,
      callback);
};


/**
 * @param {!proto.app.AddVideoHistoryRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.app.EmptyResponse>}
 *     Promise that resolves to the response
 */
proto.app.VideoPromiseClient.prototype.addVideoHistory =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/app.Video/AddVideoHistory',
      request,
      metadata || {},
      methodDescriptor_Video_AddVideoHistory);
};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.app.CommunityClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.app.CommunityPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.app.AddUserFavouriteRequest,
 *   !proto.app.EmptyResponse>}
 */
const methodDescriptor_Community_AddUserFavourite = new grpc.web.MethodDescriptor(
  '/app.Community/AddUserFavourite',
  grpc.web.MethodType.UNARY,
  proto.app.AddUserFavouriteRequest,
  proto.app.EmptyResponse,
  /**
   * @param {!proto.app.AddUserFavouriteRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.app.EmptyResponse.deserializeBinary
);


/**
 * @param {!proto.app.AddUserFavouriteRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.app.EmptyResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.app.EmptyResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.app.CommunityClient.prototype.addUserFavourite =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/app.Community/AddUserFavourite',
      request,
      metadata || {},
      methodDescriptor_Community_AddUserFavourite,
      callback);
};


/**
 * @param {!proto.app.AddUserFavouriteRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.app.EmptyResponse>}
 *     Promise that resolves to the response
 */
proto.app.CommunityPromiseClient.prototype.addUserFavourite =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/app.Community/AddUserFavourite',
      request,
      metadata || {},
      methodDescriptor_Community_AddUserFavourite);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.app.GetUserFavouriteRequest,
 *   !proto.app.GetUserFavouriteResponse>}
 */
const methodDescriptor_Community_GetUserFavourite = new grpc.web.MethodDescriptor(
  '/app.Community/GetUserFavourite',
  grpc.web.MethodType.UNARY,
  proto.app.GetUserFavouriteRequest,
  proto.app.GetUserFavouriteResponse,
  /**
   * @param {!proto.app.GetUserFavouriteRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.app.GetUserFavouriteResponse.deserializeBinary
);


/**
 * @param {!proto.app.GetUserFavouriteRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.app.GetUserFavouriteResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.app.GetUserFavouriteResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.app.CommunityClient.prototype.getUserFavourite =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/app.Community/GetUserFavourite',
      request,
      metadata || {},
      methodDescriptor_Community_GetUserFavourite,
      callback);
};


/**
 * @param {!proto.app.GetUserFavouriteRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.app.GetUserFavouriteResponse>}
 *     Promise that resolves to the response
 */
proto.app.CommunityPromiseClient.prototype.getUserFavourite =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/app.Community/GetUserFavourite',
      request,
      metadata || {},
      methodDescriptor_Community_GetUserFavourite);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.app.GetVideoFavouriteRequest,
 *   !proto.app.GetVideoFavouriteResponse>}
 */
const methodDescriptor_Community_GetVideoFavourit = new grpc.web.MethodDescriptor(
  '/app.Community/GetVideoFavourit',
  grpc.web.MethodType.UNARY,
  proto.app.GetVideoFavouriteRequest,
  proto.app.GetVideoFavouriteResponse,
  /**
   * @param {!proto.app.GetVideoFavouriteRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.app.GetVideoFavouriteResponse.deserializeBinary
);


/**
 * @param {!proto.app.GetVideoFavouriteRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.app.GetVideoFavouriteResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.app.GetVideoFavouriteResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.app.CommunityClient.prototype.getVideoFavourit =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/app.Community/GetVideoFavourit',
      request,
      metadata || {},
      methodDescriptor_Community_GetVideoFavourit,
      callback);
};


/**
 * @param {!proto.app.GetVideoFavouriteRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.app.GetVideoFavouriteResponse>}
 *     Promise that resolves to the response
 */
proto.app.CommunityPromiseClient.prototype.getVideoFavourit =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/app.Community/GetVideoFavourit',
      request,
      metadata || {},
      methodDescriptor_Community_GetVideoFavourit);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.app.AddUserLikeRequest,
 *   !proto.app.EmptyResponse>}
 */
const methodDescriptor_Community_AddUserLike = new grpc.web.MethodDescriptor(
  '/app.Community/AddUserLike',
  grpc.web.MethodType.UNARY,
  proto.app.AddUserLikeRequest,
  proto.app.EmptyResponse,
  /**
   * @param {!proto.app.AddUserLikeRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.app.EmptyResponse.deserializeBinary
);


/**
 * @param {!proto.app.AddUserLikeRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.app.EmptyResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.app.EmptyResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.app.CommunityClient.prototype.addUserLike =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/app.Community/AddUserLike',
      request,
      metadata || {},
      methodDescriptor_Community_AddUserLike,
      callback);
};


/**
 * @param {!proto.app.AddUserLikeRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.app.EmptyResponse>}
 *     Promise that resolves to the response
 */
proto.app.CommunityPromiseClient.prototype.addUserLike =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/app.Community/AddUserLike',
      request,
      metadata || {},
      methodDescriptor_Community_AddUserLike);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.app.GetUserLikeRequest,
 *   !proto.app.GetUserLikeResponse>}
 */
const methodDescriptor_Community_GetUserLike = new grpc.web.MethodDescriptor(
  '/app.Community/GetUserLike',
  grpc.web.MethodType.UNARY,
  proto.app.GetUserLikeRequest,
  proto.app.GetUserLikeResponse,
  /**
   * @param {!proto.app.GetUserLikeRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.app.GetUserLikeResponse.deserializeBinary
);


/**
 * @param {!proto.app.GetUserLikeRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.app.GetUserLikeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.app.GetUserLikeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.app.CommunityClient.prototype.getUserLike =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/app.Community/GetUserLike',
      request,
      metadata || {},
      methodDescriptor_Community_GetUserLike,
      callback);
};


/**
 * @param {!proto.app.GetUserLikeRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.app.GetUserLikeResponse>}
 *     Promise that resolves to the response
 */
proto.app.CommunityPromiseClient.prototype.getUserLike =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/app.Community/GetUserLike',
      request,
      metadata || {},
      methodDescriptor_Community_GetUserLike);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.app.GetVideoLikeRequest,
 *   !proto.app.GetVideoLikeResponse>}
 */
const methodDescriptor_Community_GetVideoLike = new grpc.web.MethodDescriptor(
  '/app.Community/GetVideoLike',
  grpc.web.MethodType.UNARY,
  proto.app.GetVideoLikeRequest,
  proto.app.GetVideoLikeResponse,
  /**
   * @param {!proto.app.GetVideoLikeRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.app.GetVideoLikeResponse.deserializeBinary
);


/**
 * @param {!proto.app.GetVideoLikeRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.app.GetVideoLikeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.app.GetVideoLikeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.app.CommunityClient.prototype.getVideoLike =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/app.Community/GetVideoLike',
      request,
      metadata || {},
      methodDescriptor_Community_GetVideoLike,
      callback);
};


/**
 * @param {!proto.app.GetVideoLikeRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.app.GetVideoLikeResponse>}
 *     Promise that resolves to the response
 */
proto.app.CommunityPromiseClient.prototype.getVideoLike =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/app.Community/GetVideoLike',
      request,
      metadata || {},
      methodDescriptor_Community_GetVideoLike);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.app.AddVideoCommentRequest,
 *   !proto.app.EmptyResponse>}
 */
const methodDescriptor_Community_AddVideoComment = new grpc.web.MethodDescriptor(
  '/app.Community/AddVideoComment',
  grpc.web.MethodType.UNARY,
  proto.app.AddVideoCommentRequest,
  proto.app.EmptyResponse,
  /**
   * @param {!proto.app.AddVideoCommentRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.app.EmptyResponse.deserializeBinary
);


/**
 * @param {!proto.app.AddVideoCommentRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.app.EmptyResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.app.EmptyResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.app.CommunityClient.prototype.addVideoComment =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/app.Community/AddVideoComment',
      request,
      metadata || {},
      methodDescriptor_Community_AddVideoComment,
      callback);
};


/**
 * @param {!proto.app.AddVideoCommentRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.app.EmptyResponse>}
 *     Promise that resolves to the response
 */
proto.app.CommunityPromiseClient.prototype.addVideoComment =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/app.Community/AddVideoComment',
      request,
      metadata || {},
      methodDescriptor_Community_AddVideoComment);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.app.GetVideoCommentRequest,
 *   !proto.app.GetVideoCommentResponse>}
 */
const methodDescriptor_Community_GetVideoComment = new grpc.web.MethodDescriptor(
  '/app.Community/GetVideoComment',
  grpc.web.MethodType.UNARY,
  proto.app.GetVideoCommentRequest,
  proto.app.GetVideoCommentResponse,
  /**
   * @param {!proto.app.GetVideoCommentRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.app.GetVideoCommentResponse.deserializeBinary
);


/**
 * @param {!proto.app.GetVideoCommentRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.app.GetVideoCommentResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.app.GetVideoCommentResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.app.CommunityClient.prototype.getVideoComment =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/app.Community/GetVideoComment',
      request,
      metadata || {},
      methodDescriptor_Community_GetVideoComment,
      callback);
};


/**
 * @param {!proto.app.GetVideoCommentRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.app.GetVideoCommentResponse>}
 *     Promise that resolves to the response
 */
proto.app.CommunityPromiseClient.prototype.getVideoComment =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/app.Community/GetVideoComment',
      request,
      metadata || {},
      methodDescriptor_Community_GetVideoComment);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.app.AddVideoBulletRequest,
 *   !proto.app.EmptyResponse>}
 */
const methodDescriptor_Community_AddVideoBullet = new grpc.web.MethodDescriptor(
  '/app.Community/AddVideoBullet',
  grpc.web.MethodType.UNARY,
  proto.app.AddVideoBulletRequest,
  proto.app.EmptyResponse,
  /**
   * @param {!proto.app.AddVideoBulletRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.app.EmptyResponse.deserializeBinary
);


/**
 * @param {!proto.app.AddVideoBulletRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.app.EmptyResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.app.EmptyResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.app.CommunityClient.prototype.addVideoBullet =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/app.Community/AddVideoBullet',
      request,
      metadata || {},
      methodDescriptor_Community_AddVideoBullet,
      callback);
};


/**
 * @param {!proto.app.AddVideoBulletRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.app.EmptyResponse>}
 *     Promise that resolves to the response
 */
proto.app.CommunityPromiseClient.prototype.addVideoBullet =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/app.Community/AddVideoBullet',
      request,
      metadata || {},
      methodDescriptor_Community_AddVideoBullet);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.app.GetVideoBulletRequest,
 *   !proto.app.GetVideoBulletResponse>}
 */
const methodDescriptor_Community_GetVideoBullet = new grpc.web.MethodDescriptor(
  '/app.Community/GetVideoBullet',
  grpc.web.MethodType.UNARY,
  proto.app.GetVideoBulletRequest,
  proto.app.GetVideoBulletResponse,
  /**
   * @param {!proto.app.GetVideoBulletRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.app.GetVideoBulletResponse.deserializeBinary
);


/**
 * @param {!proto.app.GetVideoBulletRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.app.GetVideoBulletResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.app.GetVideoBulletResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.app.CommunityClient.prototype.getVideoBullet =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/app.Community/GetVideoBullet',
      request,
      metadata || {},
      methodDescriptor_Community_GetVideoBullet,
      callback);
};


/**
 * @param {!proto.app.GetVideoBulletRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.app.GetVideoBulletResponse>}
 *     Promise that resolves to the response
 */
proto.app.CommunityPromiseClient.prototype.getVideoBullet =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/app.Community/GetVideoBullet',
      request,
      metadata || {},
      methodDescriptor_Community_GetVideoBullet);
};


}); // goog.scope

