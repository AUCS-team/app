/**
 * @fileoverview gRPC-Web generated client stub for app
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.1
// 	protoc              v4.24.4
// source: protobuf/app.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');

const proto = {};
proto.app = require('./app_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.app.MetaClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.app.MetaPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.app.EchoRequest,
 *   !proto.app.EchoResponse>}
 */
const methodDescriptor_Meta_Echo = new grpc.web.MethodDescriptor(
  '/app.Meta/Echo',
  grpc.web.MethodType.UNARY,
  proto.app.EchoRequest,
  proto.app.EchoResponse,
  /**
   * @param {!proto.app.EchoRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.app.EchoResponse.deserializeBinary
);


/**
 * @param {!proto.app.EchoRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.app.EchoResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.app.EchoResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.app.MetaClient.prototype.echo =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/app.Meta/Echo',
      request,
      metadata || {},
      methodDescriptor_Meta_Echo,
      callback);
};


/**
 * @param {!proto.app.EchoRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.app.EchoResponse>}
 *     Promise that resolves to the response
 */
proto.app.MetaPromiseClient.prototype.echo =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/app.Meta/Echo',
      request,
      metadata || {},
      methodDescriptor_Meta_Echo);
};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.app.UserOperationClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.app.UserOperationPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.app.SignUpRequest,
 *   !proto.app.SignUpResponse>}
 */
const methodDescriptor_UserOperation_SignUp = new grpc.web.MethodDescriptor(
  '/app.UserOperation/SignUp',
  grpc.web.MethodType.UNARY,
  proto.app.SignUpRequest,
  proto.app.SignUpResponse,
  /**
   * @param {!proto.app.SignUpRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.app.SignUpResponse.deserializeBinary
);


/**
 * @param {!proto.app.SignUpRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.app.SignUpResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.app.SignUpResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.app.UserOperationClient.prototype.signUp =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/app.UserOperation/SignUp',
      request,
      metadata || {},
      methodDescriptor_UserOperation_SignUp,
      callback);
};


/**
 * @param {!proto.app.SignUpRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.app.SignUpResponse>}
 *     Promise that resolves to the response
 */
proto.app.UserOperationPromiseClient.prototype.signUp =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/app.UserOperation/SignUp',
      request,
      metadata || {},
      methodDescriptor_UserOperation_SignUp);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.app.SignInRequest,
 *   !proto.app.SignInResponse>}
 */
const methodDescriptor_UserOperation_SignIn = new grpc.web.MethodDescriptor(
  '/app.UserOperation/SignIn',
  grpc.web.MethodType.UNARY,
  proto.app.SignInRequest,
  proto.app.SignInResponse,
  /**
   * @param {!proto.app.SignInRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.app.SignInResponse.deserializeBinary
);


/**
 * @param {!proto.app.SignInRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.app.SignInResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.app.SignInResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.app.UserOperationClient.prototype.signIn =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/app.UserOperation/SignIn',
      request,
      metadata || {},
      methodDescriptor_UserOperation_SignIn,
      callback);
};


/**
 * @param {!proto.app.SignInRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.app.SignInResponse>}
 *     Promise that resolves to the response
 */
proto.app.UserOperationPromiseClient.prototype.signIn =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/app.UserOperation/SignIn',
      request,
      metadata || {},
      methodDescriptor_UserOperation_SignIn);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.app.GetUserInfoByIdRequest,
 *   !proto.app.GetUserInfoResponse>}
 */
const methodDescriptor_UserOperation_GetUserInfoById = new grpc.web.MethodDescriptor(
  '/app.UserOperation/GetUserInfoById',
  grpc.web.MethodType.UNARY,
  proto.app.GetUserInfoByIdRequest,
  proto.app.GetUserInfoResponse,
  /**
   * @param {!proto.app.GetUserInfoByIdRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.app.GetUserInfoResponse.deserializeBinary
);


/**
 * @param {!proto.app.GetUserInfoByIdRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.app.GetUserInfoResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.app.GetUserInfoResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.app.UserOperationClient.prototype.getUserInfoById =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/app.UserOperation/GetUserInfoById',
      request,
      metadata || {},
      methodDescriptor_UserOperation_GetUserInfoById,
      callback);
};


/**
 * @param {!proto.app.GetUserInfoByIdRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.app.GetUserInfoResponse>}
 *     Promise that resolves to the response
 */
proto.app.UserOperationPromiseClient.prototype.getUserInfoById =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/app.UserOperation/GetUserInfoById',
      request,
      metadata || {},
      methodDescriptor_UserOperation_GetUserInfoById);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.app.GetUserInfoByUsernameRequest,
 *   !proto.app.GetUserInfoResponse>}
 */
const methodDescriptor_UserOperation_GetUserInfoByUsername = new grpc.web.MethodDescriptor(
  '/app.UserOperation/GetUserInfoByUsername',
  grpc.web.MethodType.UNARY,
  proto.app.GetUserInfoByUsernameRequest,
  proto.app.GetUserInfoResponse,
  /**
   * @param {!proto.app.GetUserInfoByUsernameRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.app.GetUserInfoResponse.deserializeBinary
);


/**
 * @param {!proto.app.GetUserInfoByUsernameRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.app.GetUserInfoResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.app.GetUserInfoResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.app.UserOperationClient.prototype.getUserInfoByUsername =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/app.UserOperation/GetUserInfoByUsername',
      request,
      metadata || {},
      methodDescriptor_UserOperation_GetUserInfoByUsername,
      callback);
};


/**
 * @param {!proto.app.GetUserInfoByUsernameRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.app.GetUserInfoResponse>}
 *     Promise that resolves to the response
 */
proto.app.UserOperationPromiseClient.prototype.getUserInfoByUsername =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/app.UserOperation/GetUserInfoByUsername',
      request,
      metadata || {},
      methodDescriptor_UserOperation_GetUserInfoByUsername);
};


module.exports = proto.app;

